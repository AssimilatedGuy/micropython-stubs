from typing import Any, Optional

class MicroWebSrvRoute:
    route: Any = ...
    method: Any = ...
    func: Any = ...
    routeArgNames: Any = ...
    routeRegex: Any = ...
    def __init__(self, route: Any, method: Any, func: Any, routeArgNames: Any, routeRegex: Any) -> None: ...

class MicroWebSrv:
    _indexPages: Any = ...
    _mimeTypes: Any = ...
    _html_escape_chars: Any = ...
    _pyhtmlPagesExt: str = ...
    _docoratedRouteHandlers: Any = ...
    @classmethod
    def route(cls: Any, url: Any, method: str=...) -> Any: ...
    @staticmethod
    def HTMLEscape(s: Any) -> Any: ...
    @staticmethod
    def _tryAllocByteArray(size: Any) -> Any: ...
    @staticmethod
    def _tryStartThread(func: Any, args: Any=..., stacksize: int=...) -> Any: ...
    @staticmethod
    def _unquote(s: Any) -> Any: ...
    @staticmethod
    def _unquote_plus(s: Any) -> Any: ...
    @staticmethod
    def _fileExists(path: Any) -> Any: ...
    @staticmethod
    def _isPyHTMLFile(filename: Any) -> Any: ...
    _srvAddr: Any = ...
    _webPath: Any = ...
    _notFoundUrl: Any = ...
    _started: bool = ...
    thID: Any = ...
    isThreaded: bool = ...
    _state: str = ...
    MaxWebSocketRecvLen: int = ...
    WebSocketThreaded: bool = ...
    WebSocketStackSize: int = ...
    AcceptWebSocketCallback: Any = ...
    _routeHandlers: Any = ...
    def __init__(self, routeHandlers: Any=..., port: int=..., bindIP: str=..., webPath: str=...) -> None: ...
    def _serverProcess(self) -> None: ...
    _server: Any = ...
    def Start(self, threaded: bool=..., stackSize: int=...) -> None: ...
    def Stop(self) -> None: ...
    def IsStarted(self) -> None: ...
    def threadID(self) -> None: ...
    def State(self) -> None: ...
    def SetNotFoundPageUrl(self, url: Optional[Any]=...) -> None: ...
    def GetMimeTypeFromFilename(self, filename: Any) -> Any: ...
    def GetRouteHandler(self, resUrl: Any, method: Any) -> Any: ...
    def _physPathFromURLPath(self, urlPath: Any) -> Any: ...
    class _client:
        _microWebSrv: Any = ...
        _socket: Any = ...
        _addr: Any = ...
        _method: Any = ...
        _path: Any = ...
        _httpVer: Any = ...
        _resPath: str = ...
        _queryString: str = ...
        _queryParams: Any = ...
        _headers: Any = ...
        _contentType: Any = ...
        _contentLength: int = ...
        def __init__(self, microWebSrv: Any, socket: Any, addr: Any) -> None: ...
        def _processRequest(self) -> None: ...
        def _parseFirstLine(self, response: Any) -> Any: ...
        def _parseHeader(self, response: Any) -> Any: ...
        def _getConnUpgrade(self) -> None: ...
        def GetServer(self) -> None: ...
        def GetAddr(self) -> None: ...
        def GetIPAddr(self) -> None: ...
        def GetPort(self) -> None: ...
        def GetRequestMethod(self) -> None: ...
        def GetRequestTotalPath(self) -> None: ...
        def GetRequestPath(self) -> None: ...
        def GetRequestQueryString(self) -> None: ...
        def GetRequestQueryParams(self) -> None: ...
        def GetRequestHeaders(self) -> None: ...
        def GetRequestContentType(self) -> None: ...
        def GetRequestContentLength(self) -> None: ...
        def ReadRequestContent(self, size: Optional[Any]=...) -> Any: ...
        def ReadRequestPostedFormData(self) -> None: ...
        def ReadRequestContentAsJSON(self) -> None: ...
    class _response:
        _client: Any = ...
        def __init__(self, client: Any) -> None: ...
        def _write(self, data: Any) -> Any: ...
        def _writeFirstLine(self, code: Any) -> None: ...
        def _writeHeader(self, name: Any, value: Any) -> None: ...
        def _writeContentTypeHeader(self, contentType: Any, charset: Optional[Any]=...) -> None: ...
        def _writeServerHeader(self) -> None: ...
        def _writeEndHeader(self) -> None: ...
        def _writeBeforeContent(self, code: Any, headers: Any, contentType: Any, contentCharset: Any, contentLength: Any) -> None: ...
        def WriteSwitchProto(self, upgrade: Any, headers: Optional[Any]=...) -> None: ...
        def WriteResponse(self, code: Any, headers: Any, contentType: Any, contentCharset: Any, content: Any) -> Any: ...
        def WriteResponsePyHTMLFile(self, filepath: Any, headers: Optional[Any]=...) -> Any: ...
        def WriteResponseFile(self, filepath: Any, contentType: Optional[Any]=..., headers: Optional[Any]=...) -> Any: ...
        def WriteResponseFileAttachment(self, filepath: Any, attachmentName: Any, headers: Optional[Any]=...) -> Any: ...
        def WriteResponseOk(self, headers: Optional[Any]=..., contentType: Optional[Any]=..., contentCharset: Optional[Any]=..., content: Optional[Any]=...) -> Any: ...
        def WriteResponseJSONOk(self, obj: Optional[Any]=..., headers: Optional[Any]=...) -> Any: ...
        def WriteResponseRedirect(self, location: Any) -> Any: ...
        def WriteResponseError(self, code: Any) -> Any: ...
        def WriteResponseJSONError(self, code: Any, obj: Optional[Any]=...) -> Any: ...
        def WriteResponseBadRequest(self) -> None: ...
        def WriteResponseForbidden(self) -> None: ...
        def WriteResponseNotFound(self) -> None: ...
        def WriteResponseMethodNotAllowed(self) -> None: ...
        def WriteResponseInternalServerError(self) -> None: ...
        def WriteResponseNotImplemented(self) -> None: ...
        _errCtnTmpl: str = ...
        _execErrCtnTmpl: str = ...
        _responseCodes: Any = ...
