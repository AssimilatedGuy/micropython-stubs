from typing import Any, Optional

PORTRAIT: Any
LANDSCAPE: Any
PORTRAIT_UPSIDEDOWN: Any
LANDSCAPE_UPSIDEDOWN: Any
STARTUP_DECO_NONE: Any
STARTUP_DECO_MLOGO: Any
STARTUP_DECO_INFO: Any
_uart_baud_table: Any

class LCD160CR:
    pwr: Any = ...
    i2c: Any = ...
    spi: Any = ...
    i2c_addr: Any = ...
    buf16: Any = ...
    buf19: Any = ...
    buf: Any = ...
    buf1: Any = ...
    array4: Any = ...
    def __init__(self, connect: Optional[Any]=..., *, pwr: Optional[Any]=..., i2c: Optional[Any]=..., spi: Optional[Any]=..., i2c_addr: int=...) -> None: ...
    def _send(self, cmd: Any) -> None: ...
    def _fcmd2(self, fmt: Any, a0: Any, a1: int=..., a2: int=...) -> None: ...
    def _fcmd2b(self, fmt: Any, a0: Any, a1: Any, a2: Any, a3: Any, a4: int=...) -> None: ...
    def _waitfor(self, n: Any, buf: Any) -> None: ...
    def oflush(self, n: int=...) -> None: ...
    def iflush(self) -> None: ...
    @staticmethod
    def rgb(r: Any, g: Any, b: Any) -> Any: ...
    @staticmethod
    def clip_line(c: Any, w: Any, h: Any) -> Any: ...
    def set_power(self, on: Any) -> None: ...
    w: Any = ...
    h: Any = ...
    def set_orient(self, orient: Any) -> None: ...
    def set_brightness(self, value: Any) -> None: ...
    def set_i2c_addr(self, addr: Any) -> None: ...
    def set_uart_baudrate(self, baudrate: Any) -> None: ...
    def set_startup_deco(self, value: Any) -> None: ...
    def save_to_flash(self) -> None: ...
    def set_pixel(self, x: Any, y: Any, c: Any) -> None: ...
    def get_pixel(self, x: Any, y: Any) -> Any: ...
    def get_line(self, x: Any, y: Any, buf: Any) -> None: ...
    def screen_dump(self, buf: Any, x: int=..., y: int=..., w: Optional[Any]=..., h: Optional[Any]=...) -> None: ...
    def screen_load(self, buf: Any) -> None: ...
    def set_pos(self, x: Any, y: Any) -> None: ...
    def set_text_color(self, fg: Any, bg: Any) -> None: ...
    def set_font(self, font: Any, scale: int=..., bold: int=..., trans: int=..., scroll: int=...) -> None: ...
    def write(self, s: Any) -> None: ...
    def set_pen(self, line: Any, fill: Any) -> None: ...
    def erase(self) -> None: ...
    def dot(self, x: Any, y: Any) -> None: ...
    def rect(self, x: Any, y: Any, w: Any, h: Any, cmd: int=...) -> None: ...
    def rect_outline(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def rect_interior(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def line(self, x1: Any, y1: Any, x2: Any, y2: Any) -> None: ...
    def dot_no_clip(self, x: Any, y: Any) -> None: ...
    def rect_no_clip(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def rect_outline_no_clip(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def rect_interior_no_clip(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def line_no_clip(self, x1: Any, y1: Any, x2: Any, y2: Any) -> None: ...
    def poly_dot(self, data: Any) -> None: ...
    def poly_line(self, data: Any) -> None: ...
    def touch_config(self, calib: bool=..., save: bool=..., irq: Optional[Any]=...) -> None: ...
    def is_touched(self) -> None: ...
    def get_touch(self) -> None: ...
    def set_spi_win(self, x: Any, y: Any, w: Any, h: Any) -> None: ...
    def fast_spi(self, flush: bool=...) -> Any: ...
    def show_framebuf(self, buf: Any) -> None: ...
    def set_scroll(self, on: Any) -> None: ...
    def set_scroll_win(self, win: Any, x: int=..., y: int=..., w: int=..., h: int=..., vec: int=..., pat: int=..., fill: int=..., color: int=...) -> None: ...
    def set_scroll_win_param(self, win: Any, param: Any, value: Any) -> None: ...
    def set_scroll_buf(self, s: Any) -> None: ...
    def jpeg_start(self, l: Any) -> None: ...
    def jpeg_data(self, buf: Any) -> None: ...
    def jpeg(self, buf: Any) -> None: ...
    def feed_wdt(self) -> None: ...
    def reset(self) -> None: ...
