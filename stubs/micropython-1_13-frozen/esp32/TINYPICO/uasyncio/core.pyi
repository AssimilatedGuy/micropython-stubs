from typing import Any, Optional

class CancelledError(BaseException): ...
class TimeoutError(Exception): ...

_exc_context: Any

class SingletonGenerator:
    state: Any = ...
    exc: Any = ...
    def __init__(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> None: ...

def sleep_ms(t: Any, sgen: Any=...) -> Any: ...
def sleep(t: Any) -> Any: ...

class IOQueue:
    poller: Any = ...
    map: Any = ...
    def __init__(self) -> None: ...
    def _enqueue(self, s: Any, idx: Any) -> None: ...
    def _dequeue(self, s: Any) -> None: ...
    def queue_read(self, s: Any) -> None: ...
    def queue_write(self, s: Any) -> None: ...
    def remove(self, task: Any) -> None: ...
    def wait_io_event(self, dt: Any) -> None: ...

def _promote_to_task(aw: Any) -> Any: ...
def create_task(coro: Any) -> Any: ...
def run_until_complete(main_task: Optional[Any]=...) -> Any: ...
def run(coro: Any) -> Any: ...
async def _stopper() -> None: ...

_stop_task: Any

class Loop:
    _exc_handler: Any = ...
    def create_task(coro: Any) -> Any: ...
    def run_forever() -> None: ...
    def run_until_complete(aw: Any) -> Any: ...
    def stop() -> None: ...
    def close() -> None: ...
    def set_exception_handler(handler: Any) -> None: ...
    def get_exception_handler() -> None: ...
    def default_exception_handler(loop: Any, context: Any) -> None: ...
    def call_exception_handler(context: Any) -> None: ...

def get_event_loop(runq_len: int=..., waitq_len: int=...) -> Any: ...
def new_event_loop() -> None: ...
