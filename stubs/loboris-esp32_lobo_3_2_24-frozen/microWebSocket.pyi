from typing import Any, Optional

class MicroWebSocket:
    _handshakeSign: str = ...
    _opContFrame: int = ...
    _opTextFrame: int = ...
    _opBinFrame: int = ...
    _opCloseFrame: int = ...
    _opPingFrame: int = ...
    _opPongFrame: int = ...
    _msgTypeText: int = ...
    _msgTypeBin: int = ...
    @staticmethod
    def _tryAllocByteArray(size: Any) -> Any: ...
    @staticmethod
    def _tryStartThread(func: Any, args: Any=..., stackSize: int=...) -> Any: ...
    _socket: Any = ...
    _httpCli: Any = ...
    _closed: bool = ...
    RecvTextCallback: Any = ...
    RecvBinaryCallback: Any = ...
    ClosedCallback: Any = ...
    thID: Any = ...
    isThreaded: Any = ...
    _ctrlBuf: Any = ...
    _msgBuf: Any = ...
    _msgType: Any = ...
    _msgLen: int = ...
    def __init__(self, socket: Any, httpClient: Any, httpResponse: Any, maxRecvLen: Any, threaded: Any, acceptCallback: Any, stackSize: int=...) -> None: ...
    def _handshake(self, httpResponse: Any) -> Any: ...
    def _wsProcess(self, acceptCallback: Any) -> None: ...
    def _receiveFrame(self) -> None: ...
    def _sendFrame(self, opcode: Any, data: Optional[Any]=..., fin: bool=...) -> Any: ...
    def SendText(self, msg: Any) -> Any: ...
    def SendBinary(self, data: Any) -> Any: ...
    def IsClosed(self) -> None: ...
    def threadID(self) -> None: ...
    def Close(self) -> None: ...
