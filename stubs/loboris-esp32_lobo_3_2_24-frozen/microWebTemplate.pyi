from typing import Any, Optional

class MicroWebTemplate:
    TOKEN_OPEN: str = ...
    TOKEN_CLOSE: str = ...
    TOKEN_OPEN_LEN: Any = ...
    TOKEN_CLOSE_LEN: Any = ...
    INSTRUCTION_PYTHON: str = ...
    INSTRUCTION_IF: str = ...
    INSTRUCTION_ELIF: str = ...
    INSTRUCTION_ELSE: str = ...
    INSTRUCTION_FOR: str = ...
    INSTRUCTION_END: str = ...
    INSTRUCTION_INCLUDE: str = ...
    _code: Any = ...
    _escapeStrFunc: Any = ...
    _filepath: Any = ...
    _pos: int = ...
    _endPos: Any = ...
    _line: int = ...
    _reIdentifier: Any = ...
    _pyGlobalVars: Any = ...
    _pyLocalVars: Any = ...
    _rendered: str = ...
    _instructions: Any = ...
    def __init__(self, code: Any, escapeStrFunc: Optional[Any]=..., filepath: str=...) -> None: ...
    def Validate(self) -> None: ...
    def Execute(self) -> None: ...
    def _parseCode(self, execute: Any) -> None: ...
    def _parseBloc(self, execute: Any) -> Any: ...
    def _processToken(self, tokenContent: Any, execute: Any) -> Any: ...
    def _processInstructionPYTHON(self, instructionBody: Any, execute: Any) -> None: ...
    def _processInstructionIF(self, instructionBody: Any, execute: Any) -> None: ...
    _elifInstructionBody: Any = ...
    def _processInstructionELIF(self, instructionBody: Any, execute: Any) -> Any: ...
    def _processInstructionELSE(self, instructionBody: Any, execute: Any) -> Any: ...
    def _processInstructionFOR(self, instructionBody: Any, execute: Any) -> None: ...
    def _processInstructionEND(self, instructionBody: Any, execute: Any) -> Any: ...
    def _processInstructionINCLUDE(self, instructionBody: Any, execute: Any) -> None: ...
