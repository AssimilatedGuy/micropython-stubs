from typing import Any, Optional

CRITICAL: int
ERROR: int
WARNING: int
INFO: int
DEBUG: int
NOTSET: int
_level_dict: Any
_stream: Any

class Logger:
    level: Any = ...
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def _level_str(self, level: Any) -> Any: ...
    def setLevel(self, level: Any) -> None: ...
    def isEnabledFor(self, level: Any) -> Any: ...
    def log(self, level: Any, msg: Any, *args: Any) -> None: ...
    def debug(self, msg: Any, *args: Any) -> None: ...
    def info(self, msg: Any, *args: Any) -> None: ...
    def warning(self, msg: Any, *args: Any) -> None: ...
    def error(self, msg: Any, *args: Any) -> None: ...
    def critical(self, msg: Any, *args: Any) -> None: ...
    def exc(self, e: Any, msg: Any, *args: Any) -> None: ...
    def exception(self, msg: Any, *args: Any) -> None: ...
_level = INFO
_loggers: Any

def getLogger(name: Any) -> Any: ...
def info(msg: Any, *args: Any) -> None: ...
def debug(msg: Any, *args: Any) -> None: ...
def basicConfig(level: Any=..., filename: Optional[Any]=..., stream: Optional[Any]=..., format: Optional[Any]=...) -> None: ...
