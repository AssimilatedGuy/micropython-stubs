from typing import Any

class CancelledError: ...

class IOQueue:
    def _dequeue(self) -> Any: ...
    def _enqueue(self) -> Any: ...
    def queue_read(self) -> Any: ...
    def queue_write(self) -> Any: ...
    def remove(self) -> Any: ...
    def wait_io_event(self) -> Any: ...

class Loop:
    _exc_handler: Any = ...
    def call_exception_handler(self) -> Any: ...
    def close(self) -> Any: ...
    def create_task(self) -> Any: ...
    def default_exception_handler(self) -> Any: ...
    def get_exception_handler(self) -> Any: ...
    def run_forever(self) -> Any: ...
    def run_until_complete(self) -> Any: ...
    def set_exception_handler(self) -> Any: ...
    def stop(self) -> Any: ...

class SingletonGenerator: ...
class Task: ...

class TaskQueue:
    def peek(self) -> Any: ...
    def pop_head(self) -> Any: ...
    def push_head(self) -> Any: ...
    def push_sorted(self) -> Any: ...
    def remove(self) -> Any: ...

class TimeoutError: ...
_exc_context = Any
_io_queue = Any

def _promote_to_task() -> Any: ...
_stop_task = Any
_stopper = Any
_task_queue = Any

def create_task() -> Any: ...
def current_task() -> Any: ...
def get_event_loop() -> Any: ...
def new_event_loop() -> Any: ...
def run() -> Any: ...
def run_until_complete() -> Any: ...
select = Any

def sleep() -> Any: ...
def sleep_ms() -> Any: ...
sys = Any

def ticks() -> Any: ...
def ticks_add() -> Any: ...
def ticks_diff() -> Any: ...
