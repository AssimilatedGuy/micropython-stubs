from typing import Any

class CancelledError: ...

class Event:
    def clear(self) -> Any: ...
    def is_set(self) -> Any: ...
    def set(self) -> Any: ...
    wait: Any = ...

class IOQueue:
    def _dequeue(self) -> Any: ...
    def _enqueue(self) -> Any: ...
    def queue_read(self) -> Any: ...
    def queue_write(self) -> Any: ...
    def remove(self) -> Any: ...
    def wait_io_event(self) -> Any: ...

class Lock:
    acquire: Any = ...
    def locked(self) -> Any: ...
    def release(self) -> Any: ...

class Loop:
    _exc_handler: Any = ...
    def call_exception_handler(self) -> Any: ...
    def close(self) -> Any: ...
    def create_task(self) -> Any: ...
    def default_exception_handler(self) -> Any: ...
    def get_exception_handler(self) -> Any: ...
    def run_forever(self) -> Any: ...
    def run_until_complete(self) -> Any: ...
    def set_exception_handler(self) -> Any: ...
    def stop(self) -> Any: ...

class SingletonGenerator: ...

class StreamReader:
    aclose: Any = ...
    awrite: Any = ...
    awritestr: Any = ...
    def close(self) -> Any: ...
    drain: Any = ...
    def get_extra_info(self) -> Any: ...
    read: Any = ...
    readexactly: Any = ...
    readline: Any = ...
    wait_closed: Any = ...
    def write(self) -> Any: ...

class StreamWriter:
    aclose: Any = ...
    awrite: Any = ...
    awritestr: Any = ...
    def close(self) -> Any: ...
    drain: Any = ...
    def get_extra_info(self) -> Any: ...
    read: Any = ...
    readexactly: Any = ...
    readline: Any = ...
    wait_closed: Any = ...
    def write(self) -> Any: ...

class Task: ...

class TaskQueue:
    def peek(self) -> Any: ...
    def pop_head(self) -> Any: ...
    def push_head(self) -> Any: ...
    def push_sorted(self) -> Any: ...
    def remove(self) -> Any: ...

class ThreadSafeFlag:
    def ioctl(self) -> Any: ...
    def set(self) -> Any: ...
    wait: Any = ...

class TimeoutError: ...
_attrs = Any

def create_task() -> Any: ...
def current_task() -> Any: ...
gather = Any

def get_event_loop() -> Any: ...
def new_event_loop() -> Any: ...
open_connection = Any

def run() -> Any: ...
def run_until_complete() -> Any: ...
select = Any

def sleep() -> Any: ...
def sleep_ms() -> Any: ...
start_server = Any
sys = Any

def ticks() -> Any: ...
def ticks_add() -> Any: ...
def ticks_diff() -> Any: ...
wait_for = Any

def wait_for_ms() -> Any: ...
